// contains all the rules for the parser
let LANG_DEF = `
	TYPE_KEYWORD -> select
	TYPE_KEYWORD -> from
	TYPE_KEYWORD -> update
	TYPE_KEYWORD -> set
	TYPE_KEYWORD -> where
	TYPE_KEYWORD -> insert
	TYPE_KEYWORD -> into
	TYPE_KEYWORD -> create
	TYPE_KEYWORD -> database
	TYPE_KEYWORD -> table
	TYPE_KEYWORD -> use
	TYPE_KEYWORD -> drop
	TYPE_KEYWORD -> if
	TYPE_KEYWORD -> exists
	TYPE_KEYWORD -> procedure
	TYPE_KEYWORD -> begin
	TYPE_KEYWORD -> end
	TYPE_KEYWORD -> definer
	TYPE_KEYWORD -> having
	TYPE_KEYWORD -> count
	TYPE_KEYWORD -> values
	TYPE_KEYWORD -> join
	TYPE_KEYWORD -> left
	TYPE_KEYWORD -> right
	TYPE_KEYWORD -> full
	TYPE_KEYWORD -> outer
	TYPE_KEYWORD -> order
	TYPE_KEYWORD -> by
	TYPE_KEYWORD -> asc
	TYPE_KEYWORD -> dsc
	TYPE_KEYWORD -> as
	TYPE_KEYWORD -> auto_increment
	TYPE_KEYWORD -> in
	TYPE_KEYWORD -> like
	TYPE_KEYWORD -> view
	TYPE_KEYWORD -> xor
	TYPE_KEYWORD -> null
	TYPE_KEYWORD -> random
	TYPE_KEYWORD -> int
	TYPE_KEYWORD -> bigint
	TYPE_KEYWORD -> bit
	TYPE_KEYWORD -> bool
	TYPE_KEYWORD -> btree
	TYPE_KEYWORD -> cascade
	TYPE_KEYWORD -> case
	TYPE_KEYWORD -> charset
	TYPE_KEYWORD -> commit
	TYPE_KEYWORD -> constraint
	TYPE_KEYWORD -> int
	TYPE_KEYWORD -> mediumblob
	TYPE_KEYWORD -> mediumint
	TYPE_KEYWORD -> mediumtext
	TYPE_KEYWORD -> smallint
	TYPE_KEYWORD -> start
	TYPE_KEYWORD -> time
	TYPE_KEYWORD -> timestamp
	TYPE_KEYWORD -> timestampadd
	TYPE_KEYWORD -> timestampdiff
	TYPE_KEYWORD -> tinyblob
	TYPE_KEYWORD -> tinyint
	TYPE_KEYWORD -> tinytext
	TYPE_KEYWORD -> varchar
	TYPE_KEYWORD -> date
	TYPE_KEYWORD -> datetime
	TYPE_KEYWORD -> day
	TYPE_KEYWORD -> day_hour
	TYPE_KEYWORD -> day_microsecond
	TYPE_KEYWORD -> day_minute
	TYPE_KEYWORD -> day_second
	TYPE_KEYWORD -> hour
	TYPE_KEYWORD -> hour_microsecond
	TYPE_KEYWORD -> hour_minute
	TYPE_KEYWORD -> hour_second
	TYPE_KEYWORD -> minute
	TYPE_KEYWORD -> minute_microsecond
	TYPE_KEYWORD -> minute_second
	TYPE_KEYWORD -> second
	TYPE_KEYWORD -> second_microsecond
	TYPE_KEYWORD -> utc_date
	TYPE_KEYWORD -> utc_time
	TYPE_KEYWORD -> utc_timestamp
	TYPE_KEYWORD -> replace
	TYPE_KEYWORD -> engine
	TYPE_KEYWORD -> avg
	TYPE_KEYWORD -> algorithm
	TYPE_KEYWORD -> rollback
	TYPE_KEYWORD -> and
	TYPE_KEYWORD -> or
	TYPE_KEYWORD -> transaction



	PROGRAM -> SINGLE_STMT
	PROGRAM -> STMT
	PROGRAM -> begin transaction id semicolon STMT_LIST end transaction id semicolon

	SINGLE_STMT -> SELECT_STMT
	SINGLE_STMT -> UPDATE_STMT
	SINGLE_STMT -> DELETE_STMT
	SINGLE_STMT -> CREATE_STMT
	SINGLE_STMT -> DROP_STMT
	SINGLE_STMT -> CREATE_DB_STMT
	SINGLE_STMT -> USE_DB_STMT
	SINGLE_STMT -> ALTER_TABLE_STMT
	SINGLE_STMT -> INSERT_STMT
	SINGLE_STMT -> ASSIGNMENT_STMT

	STMT -> SINGLE_STMT semicolon
	STMT -> semicolon

	STMT_LIST -> STMT
	STMT_LIST -> STMT STMT_LIST

	SELECT_STMT -> select SELECT_VALUE_LIST from TABLES 
	SELECT_STMT -> select SELECT_VALUE_LIST from TABLES where EXPRESSION
	SELECT_STMT -> select SELECT_VALUE_LIST from TABLES where EXPRESSION order by SELECT_VALUE_LIST
	SELECT_STMT -> select SELECT_VALUE_LIST from TABLES where EXPRESSION order by SELECT_VALUE_LIST asc
	SELECT_STMT -> select SELECT_VALUE_LIST from TABLES where EXPRESSION order by SELECT_VALUE_LIST desc

	UPDATE_STMT -> update TABLES set ASSIGNMENT_LIST where EXPRESSION
	UPDATE_STMT -> update TABLES set ASSIGNMENT_LIST

	DELETE_STMT -> delete from COMPLEX_ID where EXPRESSION

	DROP_STMT -> drop database id

	CREATE_STMT -> create table id lbrace COLUMN_DEF_LIST rbrace SETTINGS_LIST;

	CREATE_DB_STMT -> create database id

	USE_DB_STMT -> use database id

	ALTER_TABLE_STMT -> alter table id ALTER_MODIFICATION_LIST

	INSERT_STMT -> insert into id values INSERT_VALUES
	INSERT_STMT -> insert into id lbrace ID_LIST rbrace values INSERT_VALUES

	INSERT_VALUES -> lbrace INSERT_VALUE_LIST rbrace
	INSERT_VALUES -> INSERT_VALUES comma INSERT_VALUES

	ALTER_MODIFICATION_LIST -> ALTER_MODIFICATION
	ALTER_MODIFICATION_LIST -> ALTER_MODIFICATION comma ALTER_MODIFICATION

	ALTER_MODIFICATION -> add column COLUMN_DEF
	ALTER_MODIFICATION -> remove column id
	ALTER_MODIFICATION -> change column id id COLUMN_DEF

	COLUMN_DEF -> id TYPE_KEYWORD auto_increment SETTINGS_LIST
	COLUMN_DEF -> id TYPE_KEYWORD SETTINGS_LIST

	SETTINGS_STMT -> id equal id
	SETTINGS_LIST -> SETTINGS_STMT
	SETTINGS_LIST -> SETTINGS_STMT comma SETTINGS_LIST
	SETTINGS_STMT -> Îµ

	COLUMN_DEF_LIST -> COLUMN_DEF
	COLUMN_DEF_LIST -> COLUMN_DEF comma COLUMN_DEF_LIST

	ASSIGNMENT_STMT -> COMPLEX_ID equal COMPLEX_ID

	ASSIGNMENT_LIST -> ASSIGNMENT_STMT
	ASSIGNMENT_LIST -> ASSIGNMENT_STMT comma ASSIGNMENT_LIST

	SELECT_VALUE_LIST -> star
	SELECT_VALUE_LIST -> VALUE
	SELECT_VALUE_LIST -> VALUE comma SELECT_VALUE_LIST

	INSERT_VALUE_LIST -> VALUE
	INSERT_VALUE_LIST -> VALUE comma VALUE

	VALUE -> id
	VALUE -> METHOD_CALL
	VALUE -> number
	VALUE -> string
	VALUE -> COMPLEX_ID
	VALUE -> null
	VALUE -> lbrace VALUE rbrace

	COMPLEX_ID -> id
	COMPLEX_ID -> COMPLEX_ID dot id

	METHOD_CALL -> id lbrace VALUE rbrace
	METHOD_CALL -> id lbrace rbrace

	EXPRESSION -> COMPARRISON
	EXPRESSION -> EXPRESSION BOOL_CONNECTIVE EXPRESSION
	EXPRESSION -> lbrace EXPRESSION rbrace

	COMPARRISON -> VALUE COMPARRISON_CONNECTIVE VALUE
	COMPARRISON -> lbrace COMPARRISON rbrace

	COMPARRISON_CONNECTIVE -> GT
	COMPARRISON_CONNECTIVE -> LT
	COMPARRISON_CONNECTIVE -> LTEQ
	COMPARRISON_CONNECTIVE -> GTEQ
	COMPARRISON_CONNECTIVE -> EQUAL
	COMPARRISON_CONNECTIVE -> NEQ

	BOOL_CONNECTIVE -> AND
	BOOL_CONNECTIVE -> OR
	BOOL_CONNECTIVE -> XOR

	TABLES -> id
	TABLES -> id comma TABLES
	TABLES -> TABLES join TABLES on EXPRESSION
	TABLES -> SELECT_QUERY
	TABLES -> lbrace TABLES rbrace
`;

export function exportLang() {
	
}
export function exportFirstSet() {
	
}
export function exportFollowSet() {
	
}


// we can generate the first set and the follow set based on the 